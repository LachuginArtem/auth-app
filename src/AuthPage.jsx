import React, { useState, useEffect, useRef } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import toast, { Toaster } from "react-hot-toast";
import { FaVk } from "react-icons/fa";
import {
  EnvelopeIcon,
  LockClosedIcon,
  EyeIcon,
  EyeSlashIcon,
  UserIcon,
  GlobeAltIcon,
} from "@heroicons/react/24/outline";
import yandexLogo from "./assets/yandex-logo.png";
import "./styles.css";

const AuthPage = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [isFormLoading, setIsFormLoading] = useState(false);
  const [isVkLoading, setIsVkLoading] = useState(false);
  const [isYandexLoading, setIsYandexLoading] = useState(false);
  const [isChecked, setIsChecked] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);

  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const handledRef = useRef(false); // ‚úÖ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤

  const realm = "default";

  // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const isAuthenticated = !!localStorage.getItem("access_token");
    if (isAuthenticated) {
      navigate("/", { replace: true });
    }
  }, [navigate]);

  // üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ OAuth callback (–Ø–Ω–¥–µ–∫—Å / VK)
  useEffect(() => {
    const code = searchParams.get("code");
    const stateParam = searchParams.get("state");

    if (code && !handledRef.current) {
      handledRef.current = true; // ‚úÖ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–∑–æ–≤
      handleOAuthCallback(code, stateParam);
    }
  }, [searchParams]);

  // üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ OAuth callback
  const handleOAuthCallback = async (code, stateParam) => {
    try {
      const savedState = localStorage.getItem("oauth_state");
      if (!savedState) {
        toast.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π state.");
        navigate("/auth", { replace: true });
        return;
      }

      const stateObj = JSON.parse(savedState);

      // –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      if (stateParam !== stateObj.stateId) {
        toast.error("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π state –ø–∞—Ä–∞–º–µ—Ç—Ä.");
        navigate("/auth", { replace: true });
        return;
      }

      const { provider, action, sessionId } = stateObj;
      const setLoading =
        provider === "vk" ? setIsVkLoading : setIsYandexLoading;
      setLoading(true);

      const tokenEndpoint = `/api/v1/${realm}/${provider}/${
        action === "login" ? "authentication" : "registration"
      }`;

      const response = await fetch(
        `${process.env.REACT_APP_DOMAIN_REGISTRATION}${tokenEndpoint}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ code, state: stateParam, session_id: sessionId }),
          credentials: "include",
        }
      );

      if (!response.ok) {
        const errorText = await response.text();
        toast.error(`–û—à–∏–±–∫–∞ OAuth (${provider}): ${errorText}`);
        navigate("/auth", { replace: true });
        return;
      }

      const data = await response.json();
      const { access_token, refresh_token, expires_at, session_id } = data;

      if (!access_token || !refresh_token) {
        toast.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.");
        navigate("/auth", { replace: true });
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
      localStorage.setItem("access_token", access_token);
      localStorage.setItem("refresh_token", refresh_token);
      localStorage.setItem("expires_at", expires_at || "");
      localStorage.setItem("session_id", session_id || "");

      toast.success(
        `–í—Ö–æ–¥ —á–µ—Ä–µ–∑ ${provider === "vk" ? "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ" : "–Ø–Ω–¥–µ–∫—Å"} —É—Å–ø–µ—à–µ–Ω!`
      );

      // —á–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.removeItem("oauth_state");

      // —á–∏—Å—Ç–∏–º URL –æ—Ç code/state
      window.history.replaceState({}, document.title, "/auth");

      // —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      navigate("/", { replace: true });
    } catch (error) {
      console.error("[AuthPage] –û—à–∏–±–∫–∞ –≤ OAuth callback:", error.message);
      toast.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.");
      navigate("/auth", { replace: true });
    } finally {
      setIsVkLoading(false);
      setIsYandexLoading(false);
    }
  };

  // üîπ –°–∞–±–º–∏—Ç —Ñ–æ—Ä–º—ã (email + –ø–∞—Ä–æ–ª—å)
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsFormLoading(true);

    const body = { email, password };
    const endpoint = isLogin
      ? `/api/v1/${realm}/auth/login`
      : `/api/v1/registration`;

    try {
      const response = await fetch(
        `${process.env.REACT_APP_DOMAIN_REGISTRATION}${endpoint}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(body),
          credentials: "include",
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        toast.error(errorData.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞.");
        return;
      }

      const data = await response.json();
      const { access_token, refresh_token, expires_at, session_id } = data;

      if (!access_token || !refresh_token) {
        toast.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã.");
        return;
      }

      localStorage.setItem("access_token", access_token);
      localStorage.setItem("refresh_token", refresh_token);
      localStorage.setItem("expires_at", expires_at || "");
      localStorage.setItem("session_id", session_id || "");

      toast.success(isLogin ? "–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!" : "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
      navigate("/", { replace: true });
    } catch {
      toast.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } finally {
      setIsFormLoading(false);
    }
  };

  // üîπ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å / VK
  const handleOAuthRedirect = async (provider) => {
    if (!isChecked && !isLogin) {
      toast.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.");
      return;
    }

    const setLoading = provider === "vk" ? setIsVkLoading : setIsYandexLoading;
    setLoading(true);

    try {
      const stateData = {
        stateId: Date.now().toString(),
        action: isLogin ? "login" : "registration",
        provider,
        sessionId: Date.now().toString(),
      };

      localStorage.setItem("oauth_state", JSON.stringify(stateData));

      const redirectUri = `https://auth-app-v0pz.onrender.com/auth`;
      const url = `${process.env.REACT_APP_DOMAIN_REGISTRATION}/api/v1/${provider}/link?state=${encodeURIComponent(
        stateData.stateId
      )}&redirect_uri=${encodeURIComponent(redirectUri)}`;

      const response = await fetch(url, { method: "GET", credentials: "include" });
      if (!response.ok) {
        const errorData = await response.json();
        toast.error(errorData.message || "–û—à–∏–±–∫–∞ OAuth.");
        return;
      }

      const data = await response.json();
      if (typeof data === "string") {
        window.location.href = data;
      } else {
        toast.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.");
      }
    } catch {
      toast.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.");
    } finally {
      setLoading(false);
    }
  };

  // üîπ UI
  return (
    <div className="container">
      <Toaster position="top-right" />
      <div className="login">
        <div className="inner-container">
          <h1>{isLogin ? "–í—Ö–æ–¥" : "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"}</h1>
          <form onSubmit={handleSubmit}>
            <div className="input-group">
              <div className="input-with-icon">
                <EnvelopeIcon className="input-icon" />
                <div className="input-wrapper">
                  <input
                    required
                    type="email"
                    id="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                  <label htmlFor="email" className={email ? "filled" : ""}>
                    –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email
                  </label>
                </div>
              </div>
            </div>
            <div className="input-group">
              <div className="input-with-icon">
                <LockClosedIcon className="input-icon" />
                <div className="input-wrapper">
                  <input
                    required
                    type={showPassword ? "text" : "password"}
                    id="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                  <label htmlFor="password" className={password ? "filled" : ""}>
                    –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å
                  </label>
                </div>
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="password-toggle"
                >
                  {showPassword ? (
                    <EyeSlashIcon className="input-icon" />
                  ) : (
                    <EyeIcon className="input-icon" />
                  )}
                </button>
              </div>
            </div>
            {isLogin ? (
              <div className="checkbox-group">
                <input
                  id="remember-me"
                  type="checkbox"
                  checked={rememberMe}
                  onChange={() => setRememberMe(!rememberMe)}
                />
                <span>–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è</span>
                <a href="#" className="forgot-password">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
              </div>
            ) : (
              <div className="checkbox-group">
                <input
                  required
                  id="agree"
                  type="checkbox"
                  checked={isChecked}
                  onChange={() => setIsChecked(!isChecked)}
                />
                <label htmlFor="agree">
                  –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å{" "}
                  <a href="/privacy-policy" target="_blank" rel="noopener noreferrer">
                    –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                  </a>
                </label>
              </div>
            )}
            <button
              type="submit"
              className={isFormLoading || (!isLogin && !isChecked) ? "disabled" : ""}
              disabled={isFormLoading || (!isLogin && !isChecked)}
            >
              {isFormLoading ? <div className="spinner"></div> : isLogin ? "–í–æ–π—Ç–∏" : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
            </button>
          </form>
          <div className="connect-with">
            <hr />
            <p>–ò–ª–∏ –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑</p>
            <hr />
            <ul>
              <li>
                <button
                  onClick={() => handleOAuthRedirect("vk")}
                  className={isVkLoading || (!isLogin && !isChecked) ? "disabled" : ""}
                  disabled={isVkLoading || (!isLogin && !isChecked)}
                >
                  {isVkLoading ? <div className="spinner"></div> : <FaVk className="social-icon" />}
                </button>
              </li>
              <li>
                <button
                  onClick={() => handleOAuthRedirect("yandex")}
                  className={isYandexLoading || (!isLogin && !isChecked) ? "disabled" : ""}
                  disabled={isYandexLoading || (!isLogin && !isChecked)}
                >
                  {isYandexLoading ? <div className="spinner"></div> : <img src={yandexLogo} alt="Yandex" className="social-icon" />}
                </button>
              </li>
            </ul>
          </div>
          <div className="clearfix"></div>
          <span className="copyright">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</span>
        </div>
      </div>
      <div className="register">
        <div className="inner-container">
          <UserIcon className="register-icon" />
          <h2>–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!</h2>
          <p>{isLogin ? "–ï—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã? –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç!" : "–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π–¥–∏—Ç–µ!"}</p>
          <button onClick={() => setIsLogin(!isLogin)}>
            {isLogin ? "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" : "–í–æ–π—Ç–∏"} <GlobeAltIcon className="arrow-icon" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default AuthPage;
